version: 2.1
setup: true
executors:
  base:
#    docker:
    machine: true
#      - image: ubuntu-2004:202010-01
#      - image: cimg/base:stable

parameters:
#  build-parent:
#    type: boolean
#    default: false
  build_child_1 :
    type: boolean
    default: false
  build_child_2:
    type: boolean
    default: false
  build_child_3:
    type: boolean
    default: false
#  run-them-all:
#    type: boolean
#    default: false
    
jobs:
  build_child_1: 
      executor: base
      steps:
        - checkout
        - run:
            name: Docker login
            command: |
              docker run --rm -it -e AWS_ACCESS_KEY_ID=$ACCESS_KEY_ID_ENV_VAR_NAME \
              -e AWS_SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY_ENV_VAR_NAME \
              -e AWS_DEFAULT_REGION=$AWS_REGION_ENV_VAR_NAME \
              amazon/aws-cli ecr get-login-password --region $AWS_REGION_ENV_VAR_NAME | cut -c 5- | docker login \
              --username AWS --password-stdin ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME}
        - run:
            name: build child_1
            command: |
              cd Angular_example && ls -lah
              docker build -t child_1 -f Dockerfile_child .
        - run:
            name: Docker Image check
            command: docker image ls
        - run:
            name: push to ecr
            command: |
              echo "docker tag child_1 $AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME/child_1:$(echo $CIRCLE_SHA1 | cut -c -8)"
              echo "docker push $AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME/child_1:$(echo $CIRCLE_SHA1 | cut -c -8)"


  build_child_2: 
      executor: base
      steps:
        - checkout
        - run:
            name: Docker login
            command: |
              docker run --rm -it -e AWS_ACCESS_KEY_ID=$ACCESS_KEY_ID_ENV_VAR_NAME \
              -e AWS_SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY_ENV_VAR_NAME \
              -e AWS_DEFAULT_REGION=$AWS_REGION_ENV_VAR_NAME \
              amazon/aws-cli ecr get-login-password --region $AWS_REGION_ENV_VAR_NAME | cut -c 5- | docker login \
              --username AWS --password-stdin ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME}
        - run:
            name: build child_2
            command: |
              cd App_example && ls -lah
              docker build -t child_2 -f Dockerfile .
        - run:
            name: Docker Image check
            command: docker image ls
        - run:
            name: push to ecr
            command: |
              echo "docker tag child_2 $AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME/child_2:$(echo $CIRCLE_SHA1 | cut -c -8)"
              echo "docker push $AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME/child_2:$(echo $CIRCLE_SHA1 | cut -c -8)"

  build_child_3: 
      executor: base
      steps:
        - checkout
        - run:
            name: Docker login
            command: |
              docker run --rm -it -e AWS_ACCESS_KEY_ID=$ACCESS_KEY_ID_ENV_VAR_NAME \
              -e AWS_SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY_ENV_VAR_NAME \
              -e AWS_DEFAULT_REGION=$AWS_REGION_ENV_VAR_NAME \
              amazon/aws-cli ecr get-login-password --region $AWS_REGION_ENV_VAR_NAME | cut -c 5- | docker login \
              --username AWS --password-stdin ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME}
        - run:
            name: build child_3
            command: |
              cd React_app_example && ls -lah
              docker build -t child_3 -f Dockerfile .
        - run:
            name: Docker Image check
            command: docker image ls
        - run:
            name: push to ecr
            command: |
              echo "docker tag child_3 $AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME/child_3:$(echo $CIRCLE_SHA1 | cut -c -8)"
              echo "docker push $AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME/child_3:$(echo $CIRCLE_SHA1 | cut -c -8)"

#  all_projects: 
#      executor: base
#      steps:
#        - run: 
#            command: |
#              echo "all"   
              
workflows:
     
  build_child_1:
    when: 
      or: 
        - << pipeline.parameters.build_child_1 >>
#        - << pipeline.parameters.run-them-all >>     
    jobs:
      - build_child_1
      
  build_child_2:
    when: 
      or: 
        - << pipeline.parameters.build_child_2 >>
#        - << pipeline.parameters.run-them-all >> 
    jobs:
      - build_child_2

  build_child_3:
    when: 
      or: 
        - << pipeline.parameters.build_child_3 >>
#        - << pipeline.parameters.run-them-all >> 
    jobs:
      - build_child_3
     
